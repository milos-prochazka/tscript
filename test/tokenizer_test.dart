import 'package:tscript/tokenizer.dart';
import 'package:test/test.dart';

void main() {
  group('TsTokenizer String Tests', () {
    late TsTokenizer tokenizer;

    setUp(() {
      tokenizer = TsTokenizer(
        keywords: ['if', 'else', 'while'],
        operators: ['+', '-', '*', '/', '==', '!='],
      );
    });

    test('Typ 1: Jedno≈ô√°dkov√Ω ≈ôetƒõzec s escape sekvencemi', () {
      var result = tokenizer.tokenize("'Hello\\nWorld'");
      expect(result.length, 1);
      expect(result[0].tokens.length, 1);
      
      var token = result[0].tokens[0];
      expect(token.type, TsTokenType.string);
      expect(token.text, "'Hello\\nWorld'");
      expect(token.value, 'Hello\nWorld');
    });

    test('Typ 1: Unicode escape sekvence \\uXXXX', () {
      var result = tokenizer.tokenize("'Test\\u0041B'");
      expect(result[0].tokens[0].value, 'TestAB');
    });

    test('Typ 1: Unicode escape sekvence \\u{...}', () {
      var result = tokenizer.tokenize("'Emoji\\u{1F600}!'");
      expect(result[0].tokens[0].value, 'EmojiüòÄ!');
    });

    test('Typ 1: Chyba p≈ôi nov√©m ≈ô√°dku', () {
      var result = tokenizer.tokenize("'Unclosed\nstring'");
      expect(result[0].tokens[0].type, TsTokenType.error);
      expect(result[0].tokens[0].errorMessage, contains('Neuzav≈ôen√Ω'));
    });

    test('Typ 2: Jedno≈ô√°dkov√Ω ≈ôetƒõzec bez escape (kromƒõ zdvojen√Ωch uvozovek)', () {
      var result = tokenizer.tokenize('"Hello World"');
      expect(result[0].tokens[0].type, TsTokenType.string);
      expect(result[0].tokens[0].value, 'Hello World');
    });

    test('Typ 2: Zdvojen√© uvozovky pro vlo≈æen√≠ "', () {
      var result = tokenizer.tokenize('"Say ""Hello"""');
      expect(result[0].tokens[0].value, 'Say "Hello"');
    });

    test('Typ 2: Chyba p≈ôi nov√©m ≈ô√°dku', () {
      var result = tokenizer.tokenize('"Line1\nLine2"');
      expect(result[0].tokens[0].type, TsTokenType.error);
      expect(result[0].tokens[0].errorMessage, contains('nov√Ω ≈ô√°dek'));
    });

    test('Typ 3: V√≠ce≈ô√°dkov√Ω ≈ôetƒõzec s escape sekvencemi', () {
      var result = tokenizer.tokenize("'''Line1\nLine2\nLine3'''");
      expect(result[0].tokens[0].type, TsTokenType.string);
      expect(result[0].tokens[0].value, 'Line1\nLine2\nLine3');
    });

    test('Typ 3: V√≠ce≈ô√°dkov√Ω s Unicode', () {
      var result = tokenizer.tokenize("'''Multi\\nLine\\u0041'''");
      expect(result[0].tokens[0].value, 'Multi\nLineA');
    });

    test('Typ 4: V√≠ce≈ô√°dkov√Ω ≈ôetƒõzec bez escape', () {
      var result = tokenizer.tokenize('"""Line1\nLine2"""');
      expect(result[0].tokens[0].type, TsTokenType.string);
      expect(result[0].tokens[0].value, 'Line1\nLine2');
    });

    test('Typ 4: ƒåty≈ôi uvozovky pro vlo≈æen√≠ """', () {
      var result = tokenizer.tokenize('"""Use """"quotes""""."""');
      expect(result[0].tokens[0].value, 'Use """quotes""".');
    });

    test('R≈Øzn√© typy ≈ôetƒõzc≈Ø v jednom k√≥du', () {
      var source = '''
'single'
"double"
\'\'\'triple
single\'\'\'
"""triple
double"""
''';
      var result = tokenizer.tokenize(source);
      
      expect(result.length, 4);
      expect(result[0].tokens[0].value, 'single');
      expect(result[1].tokens[0].value, 'double');
      expect(result[2].tokens[0].value, 'triple\nsingle');
      expect(result[3].tokens[0].value, 'triple\ndouble');
    });
  });

  group('TsTokenizer Basic Tests', () {
    late TsTokenizer tokenizer;

    setUp(() {
      tokenizer = TsTokenizer(
        keywords: ['if', 'else', 'while', 'for'],
        operators: ['+', '-', '*', '/', '==', '!=', '<=', '>=', '++', '--'],
      );
    });

    test('ƒå√≠sla s podtr≈æ√≠tky', () {
      var result = tokenizer.tokenize('1_000_000');
      expect(result[0].tokens[0].type, TsTokenType.number);
      expect(result[0].tokens[0].value, 1000000);
    });

    test('Hexadecim√°ln√≠ ƒç√≠sla', () {
      var result = tokenizer.tokenize('0x1A3F');
      expect(result[0].tokens[0].type, TsTokenType.number);
      expect(result[0].tokens[0].value, 0x1A3F);
    });

    test('Desetinn√° ƒç√≠sla', () {
      var result = tokenizer.tokenize('3.14159');
      expect(result[0].tokens[0].type, TsTokenType.number);
      expect(result[0].tokens[0].value, 3.14159);
    });

    test('Exponenci√°ln√≠ form√°t', () {
      var result = tokenizer.tokenize('1.5e10');
      expect(result[0].tokens[0].type, TsTokenType.number);
      expect(result[0].tokens[0].value, 1.5e10);
    });

    test('Identifik√°tory', () {
      var result = tokenizer.tokenize('myVar _private \$dollar');
      expect(result[0].tokens.length, 3);
      expect(result[0].tokens[0].type, TsTokenType.identifier);
      expect(result[0].tokens[0].value, 'myVar');
      expect(result[0].tokens[1].value, '_private');
      expect(result[0].tokens[2].value, '\$dollar');
    });

    test('Kl√≠ƒçov√° slova', () {
      var result = tokenizer.tokenize('if else while for');
      expect(result[0].tokens.length, 4);
      for (var token in result[0].tokens) {
        expect(token.type, TsTokenType.keyword);
      }
    });

    test('Koment√°≈ôe', () {
      var result = tokenizer.tokenize('x = 5 # this is a comment');
      expect(result[0].tokens.length, 4);
      expect(result[0].tokens[3].type, TsTokenType.comment);
      expect(result[0].tokens[3].value, '# this is a comment');
    });

    test('Spojen√≠ ≈ô√°dk≈Ø pomoc√≠ +', () {
      var source = '''x = 1
+ 2
+ 3''';
      var result = tokenizer.tokenize(source);
      
      // V≈°echny tokeny by mƒõly b√Ωt na jednom logick√©m ≈ô√°dku
      expect(result.length, 1);
      expect(result[0].lineNumber, 1);
      
      // Tokeny: x, =, 1, +, 2, +, 3
      expect(result[0].tokens.length, 7);
      
      // Ovƒõ≈ôen√≠, ≈æe tokeny maj√≠ spr√°vn√© ≈ô√°dky (p≈Øvodn√≠ pozice)
      expect(result[0].tokens[0].line, 1); // x
      expect(result[0].tokens[3].line, 2); // +
      expect(result[0].tokens[5].line, 3); // +
    });

    test('Pozice token≈Ø', () {
      var result = tokenizer.tokenize('abc 123');
      expect(result[0].tokens[0].line, 1);
      expect(result[0].tokens[0].column, 1);
      expect(result[0].tokens[1].line, 1);
      expect(result[0].tokens[1].column, 5);
    });
  });
}
